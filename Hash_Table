struct EL_TS
{
	int lable; // значение метки
	int ind_TL; // номер в таблице лексем
	int next; // альтератива
};
class Hash
{
	int n_max; // максимальная размерность таблицы
	int n_os; // текущая размерность
	int NTS =101; // первая свободная запись в таблице строк
	EL_TS* t;

	int Hash_function(int key)
	{
		return (key % n_os) + 1;
	}

public:
	Hash(int n1 = 50, int os = 10)
	{
		n_max = n1;
		n_os = os;
		NTS = os + 1;
		t = new EL_TS[n_max];
		for (int i = 0; i < n_max; i++)
		{
			t[i].lable = t[i].ind_TL = -1;
			t[i].next = 0;
		}

	}
	Hash(Hash& other)
	{
		n_max = other.n_max;
		n_os = other.n_os;
		NTS = other.NTS;

		for (int i = 0; i < n_max; i++)
		{
			t[i].next = other.t[i].next;
			t[i].lable = other.t[i].lable;
			t[i].ind_TL = other.t[i].ind_TL;
		}
	}
	int find(int key)
	{
		int i = Hash_function(key);
		if (t[i].lable == key)
			return i;
		while (t[i].next != 0)
		{
			i = t[i].next;
			if (t[i].lable == key)
				return i;
		}
			return -1;
	}
	void add_el(int key)
	{

	}
	void delete_el(int key)
	{

	}
};
