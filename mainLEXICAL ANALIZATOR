#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <vector>
#include "Table_Lex.hpp"
using namespace std;
class Analyzator
{
private:
	ofstream file_error;
	string str;
	typedef void(Analyzator::* pfuncType)();// указатель на функцию состояния
	pfuncType pfunc;
	int RCH, // регистр числа
		RZ, // регистр знака
		RP, // регистр порядка
		RS, // регистр счётчика                                                                      
		RKL, // регистр класса лексем
		ROT, // регистр значения отношения
		RZN, // регистр значения символа
		RSOS, // регистр состояния 
		ROB, // регистр обнаружения
		RK, // регистр значения класса символа 
		RSTR, // регистр строка
		RI, // регистр номера буквы в имени переменной
		RSE; // регистр счетчика ошибок
	struct IV;
	struct DT;
	vector<IV> InitialVector;
	vector<DT> Table;

	int BSE = 0;
	enum RK
	{
		Letter, Digit, Ar_Oper, Relationship, Left_Bracket, Right_Bracket, Point, Space, End_Line, End_File
	};
	enum RKL
	{
		ROWLABEL = 1, OPERAND, AR_OPER, RELATIONSHIP, NEXT, LET, FOR, GOTO, GOSUB, LEFT_BRACKET, RIGHT_BRACKET, IF, RETURN, END, TO_, STEP, REM, ERROR, END_FILE
	};
	void Start(char* filename)
	{
		ifstream in(filename);
		if (!in)
		{
			cout << "Не удалось открыть файл";
			return;
		}
		while (!in.eof())
		{
			getline(in, str);
			str += '\n';
			Parse();

		}
		in.close();
	}
	void Parse()
	{
		for (int i = 0; i < str.size(); i++)
		{
			Transliterator(str[i]);
			(this->*pfunc)();
		}
	}
	void Transliterator(char ch)
	{
		if (ch >= 'a' && ch <= 'z')
		{
			RK = Letter;
			RZN = ch - 'a' + 1;
		}
		if (ch >= 'A' && ch <= 'Z')
		{
			RK = Letter;
			RZN = ch - 'A' + 1;
		}
		if (ch >= '0' && ch <= '9')
		{
			RK = Digit;
			RZN = ch - '0';
		}
		if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^')
		{
			RK = Ar_Oper;
			if (ch == '+')
				RZN = 1;
			if (ch == '-')
				RZN = 2;
			if (ch == '*')
				RZN = 3;
			if (ch == '/')
				RZN = 4;
			if (ch == '^')
				RZN = 5;
		}
		if (ch == ' ' || ch == '\t')
		{
			RK = Space;
		}
		if (ch == '.')
		{
			RK = Point;
		}
		if (ch == '\n')
		{
			RK = End_Line;
		}
		if (ch == '(')
		{
			RK = Left_Bracket;
		}
		if (ch == ')')
		{
			RK = Right_Bracket;
		}
		if (ch == '<' || ch == '>' || ch == '=')
		{
			RK = Relationship;
			if (ch == '>')
				RZN = 1;
			if (ch == '<')
				RZN = 2;
			if (ch == '=')
				RZN = 3;
		}
	}
	Hash TS;
	Table_Lex* TL;
	double TO[1024];
	int NTO; // указатель на первый свободный элемент в TO
	int NTL; // Указатель на первый свободный элемент в TL

	struct Token
	{
		int Class;
		int Value;
	};
	void CreatToken()
	{
		Token t;
		t.Class = RKL;
		t.Value = -1;
		if (RKL == ROWLABEL || RKL == GOTO || RKL == GOSUB)
		{
			bool fl = true;
			for (int i = 0; i < TS.Get_NTS(); i++)
			{
				if (TS.find(RSTR))
				{
					t.Value = i;
					fl = false;
					break;
				}
			}
			if (fl)
			{
				TS.add_el(RSTR);
				t.Value = TS.Get_NTS();
			}
			RSTR = 0;
		}
		if (RKL == OPERAND || RKL == NEXT)
		{
			if (RI != 0)
			{
				int n;
				if (RK == Digit)
					n = RI + 26 * (RZN + 1);
				else
					n = RI;
				TO[n] = 1;
				t.Value = n;
				RI = 0;
			}
			else
			{
				int n;
				if (RZ == 1)
					n = RCH * pow(10, RP - RS);
				else
					n = RCH / pow(10, RP + RS);
				RCH = RP = RS = 0;
				RZ = 1;
				for (int i = 287; i < NTO; i++)
				{
					if (TO[i] == n)
					{
						t.Value = i;
						TL[NTL].Value_Lex = t.Value;
						TL[NTL].Class_Lex = t.Class;
						NTL++;
						return;
					}
				}
				TO[NTO] = n;
				t.Value = NTO;
				NTO++;
			}
		}
		if (RKL == LET || RKL == FOR)
		{
			TO[RI] = 1;
			t.Value = RI;
			RI = 0;
		}
		if (RKL == AR_OPER)
			t.Value = RZN;
		if (RKL == RELATIONSHIP)
			t.Value = ROT;
		TL[NTL].Value_Lex = t.Value;
		TL[NTL].Class_Lex = t.Class;
		NTL++;

	}
	void A1()
	{
		switch (RK)
		{
		case Digit:
		{
			E2a();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			break;
		}
		default:
		{
			BSE++;
			G1b();
		}
		}
	}
	void A2()
	{
		switch (RK)
		{
		case Letter:
		{
			C2a();
			break;
		}
		case Digit:
		{
			D1a();
			break;
		}
		case Ar_Oper:
		{
			A2a();
			break;
		}
		case Relationship:
		{
			H1a();
			break;
		}
		case Left_Bracket:
		{
			A2h();
			break;
		}
		case Right_Bracket:
		{
			A3b();
			break;
		}
		case Point:
		{
			D6b();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			pfunc = &Analyzator::A1;
			break;
		}
		}
	}
	void A3()
	{
		switch (RK)
		{
		case Letter:
		{
			B1a();
			break;
		}
		case Digit:
		{
			D1a();
			break;
		}
		case Ar_Oper:
		{
			A2a();
			break;
		}
		case Relationship:
		{
			H1a();
			break;
		}
		case Left_Bracket:
		{
			A2h();
			break;
		}
		case Right_Bracket:
		{
			A3b();
			break;
		}
		case Point:
		{
			D6b();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			pfunc = &Analyzator::A1;
			break;
		}
		}
	}
	void B1()
	{
		switch (RK)
		{
		case Letter:
		{
			M1();
			break;
		}
		case End_Line:
		{
			A1f();
			break;
		}
		default:
		{
			BSE++;
			G1b();
		}
		}
	}
	void C1()
	{
		switch (RK)
		{
		case Letter:
		{
			C2d();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void C2()
	{
		switch (RK)
		{
		case Letter:
		{
			B1b();
			break;
		}
		case Digit:
		{
			A3a();
			break;
		}
		case Ar_Oper:
		{
			A2g();
			break;
		}
		case Relationship:
		{
			H1b();
			break;
		}
		case Left_Bracket:
		{
			A2k();
			break;
		}
		case Right_Bracket:
		{
			A3c();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1a();
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void D1()
	{
		switch (RK)
		{
		case Letter:
		{
			M2();
			break;
		}
		case Digit:
		{
			D1b();
			break;
		}
		case Ar_Oper:
		{
			A2c();
			break;
		}
		case Relationship:
		{
			H1c();
			break;
		}
		case Left_Bracket:
		{
			A2l();
			break;
		}
		case Right_Bracket:
		{
			A3d();
			break;
		}
		case Point:
		{
			D2c();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1b();
			break;
		}
		default:
		{
			BSE++;
			G1b();
		}
		}
	}
	void D2()
	{
		switch (RK)
		{
		case Letter:
		{
			M3();
			break;
		}
		case Digit:
		{
			D2a();
			break;
		}
		case Ar_Oper:
		{
			A2c();
			break;
		}
		case Relationship:
		{
			H1c();
			break;
		}
		case Left_Bracket:
		{
			A2l();
			break;
		}
		case Right_Bracket:
		{
			A3d();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1c();
			break;
		}
		default:
		{
			BSE++;
			G1b();
		}
		}
	}
	void D3()
	{
		switch (RK)
		{
		case Digit:
		{
			D5a();
			break;
		}
		case Ar_Oper:
		{
			D4a();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void D4()
	{
		switch (RK)
		{
		case Digit:
		{
			D5b();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void D5()
	{
		switch (RK)
		{
		case Letter:
		{
			B1c();
			break;
		}
		case Digit:
		{
			D5c();
			break;
		}
		case Ar_Oper:
		{
			A2c();
			break;
		}
		case Relationship:
		{
			H1c();
			break;
		}
		case Left_Bracket:
		{
			A2l();
			break;
		}
		case Right_Bracket:
		{
			A3d();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1d();
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void D6()
	{
		switch (RK)
		{

		case Digit:
		{
			D2b();
			break;
		}

		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void E1()
	{
		switch (RK)
		{

		case Digit:
		{
			E2b();
			break;
		}

		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void E2()
	{
		switch (RK)
		{
		case Letter:
		{
			B1e();
			break;
		}
		case Digit:
		{
			E2c();
			break;
		}
		case Ar_Oper:
		{
			A2f();
			break;
		}
		case Relationship:
		{
			H1f();
			break;
		}
		case Left_Bracket:
		{
			A2j();
			break;
		}
		case Right_Bracket:
		{
			A3g();
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1e();
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void F1()
	{
		switch (RK)
		{
		case Letter:
		{
			F2a();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void F2()
	{
		switch (RK)
		{
		case Digit:
		{
			F3a();
			break;
		}
		case Relationship:
		{
			A2o();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void F3()
	{
		switch (RK)
		{
		case Relationship:
		{
			A2o();
			break;
		}
		case Space:
		{
			break;
		}
		default:
		{
			G1b();
		}
		}
	}
	void G1()
	{
		switch (RK)
		{
		case Letter:
		{
			break;
		}
		case Digit:
		{
			break;
		}
		case Ar_Oper:
		{
			break;
		}
		case Relationship:
		{
			break;
		}
		case Left_Bracket:
		{
			break;
		}
		case Right_Bracket:
		{
			break;
		}
		case Point:
		{
			break;
		}
		case Space:
		{
			break;
		}
		case End_Line:
		{
			A1();
			break;
		}
		case End_File:
		{
			exit1();
			break;
		}
		}
	}
	void H1()
	{
		switch (RK)
		{
		case Letter:
		{
			C2b();
			break;
		}
		case Digit:
		{
			D1c();
			break;
		}
		case Ar_Oper:
		{
			A2g();
			break;
		}
		case Relationship:
		{
			A2p();
			break;
		}
		case Left_Bracket:
		{
			A2k();
			break;
		}
		case Right_Bracket:
		{
			A3c();
			break;
		}
		case Point:
		{
			D6a();
			break;
		}
		case Space:
		{
			H1();
			break;
		}
		case End_Line:
		{
			A1a();
			break;
		}
		case End_File:
		{
			exit2();
			break;
		}
		}
	}
	//oooooooooooooooooooooooooooooo
	void next()
	{
		ROB++;
	}
	void A1a()
	{
		CreatToken();
		pfunc = &Analyzator::A1;
	}
	void A1b()
	{
		RP = 0;
		CreatToken();
		pfunc = &Analyzator::A1;
	}
	void A1c()
	{
		CreatToken();
		pfunc = &Analyzator::A1;
		A1a();
	}
	void A1d()
	{
		CreatToken();
		pfunc = &Analyzator::A1;
	}
	void A1e()
	{
		A1a();
		pfunc = &Analyzator::A1;
	}
	void A1f()
	{
		RKL = ERROR;
		CreatToken();
		pfunc = &Analyzator::A1;
	}
	void A2a()
	{
		RKL = AR_OPER;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2b()
	{
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2c()
	{
		CreatToken();
		RKL = AR_OPER;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2h()
	{
		RKL = LEFT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2l()
	{
		CreatToken();
		RKL = LEFT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2g()
	{
		CreatToken();
		RKL = AR_OPER;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2p()
	{
		if (ROT == 2 && RZN == 1)
			ROT = 4;
		if (ROT == 3 && RZN == 1)
			ROT = 5;
		if (ROT == 2 && RZN == 3)
			ROT = 6;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2r()
	{
		RKL = IF;
		A2b();
		pfunc = &Analyzator::A2;
	}
	void A2k()
	{
		CreatToken();
		RKL = LEFT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2s()
	{
		RKL = RETURN;;
		A2b();
		pfunc = &Analyzator::A2;
	}
	void A2q()
	{
		RKL = END;
		A2b();
		pfunc = &Analyzator::A2;
	}
	void A2o()
	{
		if (RZN == 1)
			CreatToken();
		else
		{
			G1b();
			return;
		}
		pfunc = &Analyzator::A2;
	}
	void A2u()
	{
		RKL = TO_;
		A2b();
		pfunc = &Analyzator::A2;
	}
	void A2j()
	{
		CreatToken();
		RKL = LEFT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2f()
	{
		CreatToken();
		RKL = AR_OPER;
		CreatToken();
		pfunc = &Analyzator::A2;
	}
	void A2t()
	{
		RKL = STEP;
		A2b();
		pfunc = &Analyzator::A2;
	}
	void A3a()
	{
		CreatToken();
		pfunc = &Analyzator::A3;
	}
	void A3b()
	{
		RKL = RIGHT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A3;
	}
	void A3c()
	{
		CreatToken();
		RKL = RIGHT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A3;
	}
	void A3d()
	{
		CreatToken();
		RKL = RIGHT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A3;
	}
	void A3g()
	{
		CreatToken();
		RKL = RIGHT_BRACKET;
		CreatToken();
		pfunc = &Analyzator::A3;
	}
	void B1a()
	{
		ROB = InitialVector[RZN - 1].detection;
		pfunc = &Analyzator::B1;
	}
	void B1b()
	{
		CreatToken;
		ROB = InitialVector[RZN - 1].detection;
		pfunc = &Analyzator::B1;
	}
	void B1d()
	{
		CreatToken;
		ROB = InitialVector[RZN - 1].detection;
		pfunc = &Analyzator::B1;
	}
	void B1e()
	{
		CreatToken;
		ROB = InitialVector[RZN - 1].detection;
		pfunc = &Analyzator::B1;
	}
	void C1a()
	{
		RKL = NEXT;
		pfunc = &Analyzator::C1;
	}
	void C2a()
	{
		RKL = OPERAND;
		RI = RZN;
		pfunc = &Analyzator::C2;
	}
	void C2b()
	{
		CreatToken();
		RKL = OPERAND;
		RI = RZN;
		pfunc = &Analyzator::C2;
	}
	void C2d()
	{
		RI = RZN;
		pfunc = &Analyzator::C2;
	}
	void D1a()
	{
		RKL = OPERAND;
		RCH = RZN;
		pfunc = &Analyzator::D1;
	}
	void D1b()
	{
		RCH *= 10;
		RCH += RZN;
		pfunc = &Analyzator::D1;
	}
	void D1c()
	{
		CreatToken();
		RKL = OPERAND;
		RCH = RZN;
		pfunc = &Analyzator::D1;
	}
	void D2a()
	{
		RS++;
		RCH *= 10;
		RCH += RZN;
		pfunc = &Analyzator::D2;
	}
	void D2b()
	{
		RS = 1;
		RCH = RZN;
		pfunc = &Analyzator::D2;
	}
	void D2c()
	{
		RS = 0;
		pfunc = &Analyzator::D2;
	}
	void D3a()
	{
		RS = 0;
		pfunc = &Analyzator::D3;
	}
	void D4a()
	{
		if (RZN == 1)
			RZ = 1;
		if (RZN == 2)
			RZ = -1;
		pfunc = &Analyzator::D4;
	}
	void D5a()
	{
		RZ = 1;
		RP = RZN;
		pfunc = &Analyzator::D5;
	}
	void D5b()
	{
		RP = RZN;
		pfunc = &Analyzator::D5;
	}
	void D5c()
	{
		RP *= 10;
		RP += RZN;
		pfunc = &Analyzator::D5;
	}
	void D6a()
	{
		CreatToken();
		RKL = OPERAND;
		pfunc = &Analyzator::D6;
	}
	void D6b()
	{
		RKL = OPERAND;
		pfunc = &Analyzator::D6;
	}
	void E1a()
	{
		RKL = GOTO;
		pfunc = &Analyzator::E1;
	}
	void E1b()
	{
		RKL = GOSUB;
		pfunc = &Analyzator::E1;
	}
	void E2a()
	{
		RKL = ROWLABEL;
		RSTR = RZN;
		pfunc = &Analyzator::E2;
	}
	void E2b()
	{
		RSTR = RZN;
		pfunc = &Analyzator::E2;
	}
	void E2c()
	{
		RSTR *= 10;
		RSTR += RZN;
		pfunc = &Analyzator::E2;
	}
	void F1a()
	{
		RKL = LET;
		pfunc = &Analyzator::F1;
	}
	void F1b()
	{
		RKL = FOR;
		pfunc = &Analyzator::F1;
	}
	void F2a()
	{
		RI = RZN;
		pfunc = &Analyzator::F2;
	}
	void F3a()
	{
		RI += (RZN) * 26;
		pfunc = &Analyzator::F3;
	}
	void G1a()
	{
		RKL = REM;
		CreatToken();
		pfunc = &Analyzator::G1;
	}
	void G1b()
	{
		RKL = ERROR;
		CreatToken();
		pfunc = &Analyzator::G1;
	}
	void H1a()
	{
		RKL = RELATIONSHIP;
		ROT = RZN;
		pfunc = &Analyzator::H1;
	}
	void H1b()
	{
		CreatToken();
		RKL = RELATIONSHIP;
		ROT = RZN;
		pfunc = &Analyzator::H1;
	}
	void H1c()
	{
		CreatToken();
		RKL = RELATIONSHIP;
		ROT = RZN;
		pfunc = &Analyzator::H1;
	}
	void H1f()
	{
		H1b();
		RKL = RELATIONSHIP;
		ROT = RZN;
		pfunc = &Analyzator::H1;
	}
	void H1a()
	{
		RKL = RELATIONSHIP;
		ROT = RZN;
		pfunc = &Analyzator::H1;
	}
	void M1()
	{
		if (ROB == 0)
		{
			G1b();
			return;
		}
		if (RZN == Table[ROB - 1].symbol)
		{
			(this->*(Table[ROB - 1].pfunc))();
		}
		else
		{
			ROB = Table[ROB - 1].alternative;
			if (ROB)
				(this->*(Table[ROB - 1].pfunc))();
			else
				G1b();
		}
	}
	void M2()
	{
		if (RZN == 5)
		{
			D3a();
			return;
		}
		else
		{
			CreatToken();
			ROB = InitialVector[RZN - 1].detection;
			pfunc = &Analyzator::B1;
		}
	}
	void M3()
	{
		if (RZN == 5)
			pfunc = &Analyzator::D3;
	}
	//////////////////////////////
	void exit1()
	{
		RKL = END_FILE;
		CreatToken();
	}
	void exit2()
	{
		CreatToken();
		RKL = END_FILE;
		CreatToken();
	}
	void exit3()
	{
		CreatToken();
		RKL = END_FILE;
		CreatToken();
	}
	void exit4()
	{
		CreatToken();
		RKL = END_FILE;
		CreatToken();
	}
	void exit5()
	{
		CreatToken();
		RKL = END_FILE;
		CreatToken();
	}
	struct IV
	{
		char symbol;
		int detection;

		IV()
		{
			IV Initial_vect[10];
			Initial_vect[0].symbol = 'E';
			Initial_vect[0].detection = 1;
			Initial_vect[1].symbol = 'F';
			Initial_vect[1].detection = 3;
			Initial_vect[2].symbol = 'G';
			Initial_vect[2].detection = 5;
			Initial_vect[3].symbol = 'I';
			Initial_vect[3].detection = 11;
			Initial_vect[4].symbol = 'L';
			Initial_vect[4].detection = 12;
			Initial_vect[5].symbol = 'N';
			Initial_vect[5].detection = 14;
			Initial_vect[6].symbol = 'R';
			Initial_vect[6].detection = 17;
			Initial_vect[7].symbol = 'S';
			Initial_vect[7].detection = 23;
			Initial_vect[8].symbol = 'T';
			Initial_vect[8].detection = 26;
		}
	};
	struct DT
	{
		char symbol;
		int alternative = 0;
		pfuncType pfunc;

		DT(int size_)
		{
			vector<DT> Table_[size_];

			Table_[1].symbol = 'N';
			Table_[1].pfunc = &Analyzator::B1d;
			Table_[2].symbol = 'D';
			Table_[2].pfunc = &Analyzator::A2q;

			Table_[3].symbol = 'O';
			Table_[3].pfunc = &Analyzator::B1d;
			Table_[4].symbol = 'R';
			Table_[4].pfunc = &Analyzator::F1b;

			Table_[5].symbol = 'O';
			Table_[5].pfunc = &Analyzator::B1d;
			Table_[6].symbol = 'T';
			Table_[6].alternative = 8;
			Table_[6].pfunc = &Analyzator::B1d;
			Table_[7].symbol = 'O';
			Table_[7].pfunc = &Analyzator::E1a;
			Table_[8].symbol = 'S';
			Table_[8].pfunc = &Analyzator::B1d;
			Table_[9].symbol = 'U';
			Table_[9].pfunc = &Analyzator::B1d;
			Table_[10].symbol = 'B';
			Table_[10].pfunc = &Analyzator::E1b;

			Table_[11].symbol = 'F';
			Table_[11].pfunc = &Analyzator::A2r;

			Table_[12].symbol = 'E';
			Table_[12].pfunc = &Analyzator::B1d;
			Table_[13].symbol = 'T';
			Table_[13].pfunc = &Analyzator::F1a;

			Table_[14].symbol = 'E';
			Table_[14].pfunc = &Analyzator::B1d;
			Table_[15].symbol = 'X';
			Table_[15].pfunc = &Analyzator::B1d;
			Table_[16].symbol = 'T';
			Table_[16].pfunc = &Analyzator::C1a;

			Table_[17].symbol = 'E';
			Table_[17].pfunc = &Analyzator::B1d;
			Table_[18].symbol = 'T';
			Table_[18].alternative = 22;
			Table_[18].pfunc = &Analyzator::B1d;
			Table_[19].symbol = 'U';
			Table_[19].pfunc = &Analyzator::B1d;
			Table_[20].symbol = 'R';
			Table_[20].pfunc = &Analyzator::B1d;
			Table_[21].symbol = 'N';
			Table_[21].pfunc = &Analyzator::A2s;
			Table_[22].symbol = 'M';
			Table_[22].pfunc = &Analyzator::G1a;


			Table_[23].symbol = 'T';
			Table_[23].pfunc = &Analyzator::B1d;
			Table_[24].symbol = 'E';
			Table_[24].pfunc = &Analyzator::B1d;
			Table_[25].symbol = 'P';
			Table_[25].pfunc = &Analyzator::A2t;

			Table_[26].symbol = 'O';
			Table_[26].pfunc = &Analyzator::A2u;
		};
	}
};
