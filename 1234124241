#include <iostream>
#include <vector>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int data) : data(data), next(nullptr) {}
};

class CircularList {
private:
    Node* head;

public:
    CircularList() : head(nullptr) {}

    CircularList(const CircularList& other) {
        head = nullptr;
        Node* current = other.head;
        if (current) {
            do {
                add(current->data);
                current = current->next;
            } while (current != other.head);
        }
    }

    ~CircularList() {
        clear();
    }

    CircularList& operator=(const CircularList& other) {
        if (this == &other) {
            return *this;
        }
        clear();
        Node* current = other.head;
        if (current) {
            do {
                add(current->data);
                current = current->next;
            } while (current != other.head);
        }
        return *this;
    }

    void add(int data) {
        Node* newNode = new Node(data);
        if (!head) {
            head = newNode;
            newNode->next = head;
        }
        else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->next = head;
        }
    }

    void remove(int data) {
        if (!head) {
            return;
        }
        Node* temp = head;
        Node* prev = nullptr;
        do {
            if (temp->data == data) {
                if (temp == head) {
                    Node* last = head;
                    while (last->next != head) {
                        last = last->next;
                    }
                    head = head->next;
                    last->next = head;
                    delete temp;
                    return;
                }
                else {
                    prev->next = temp->next;
                    delete temp;
                    return;
                }
            }
            prev = temp;
            temp = temp->next;
        } while (temp != head);
    }

    bool find(int data) const {
        Node* temp = head;
        if (temp) {
            do {
                if (temp->data == data) return true;
                temp = temp->next;
            } while (temp != head);
        }
        return false;
    }

    void clear() {
        if (!head) {
            return;
        }
        Node* temp = head;
        do {
            Node* next = temp->next;
            delete temp;
            temp = next;
        } while (temp != head);
        head = nullptr;
    }

    int& operator[](int index) {
        Node* temp = head;
        for (int i = 0; i < index; i++) {
            if (temp->next == head) {
                cout << "Индекс вне границ" << endl;
                exit(1);
            }
            temp = temp->next;
        }
        return temp->data;
    }

    friend ostream& operator<<(ostream& os, const CircularList& list) {
        Node* temp = list.head;
        if (temp) {
            do {
                os << temp->data << " ";
                temp = temp->next;
            } while (temp != list.head);
        }
        return os;
    }

    friend istream& operator>>(istream& is, CircularList& list) {
        list.clear();
        int data;
        cout << "Введите элементы списка (окончание ввода нажатием Enter): ";

        while (true) {
            if (is.peek() == '\n') {
                break;
            }
            if (is >> data) {
                list.add(data);
            }
            else {
                break;
            }
        }

        is.clear();
        return is;
    }

    // конкатенация списков
    CircularList operator+(const CircularList& other) const {
        CircularList result(*this);
        Node* current = other.head;
        if (current) {
            do {
                result.add(current->data);
                current = current->next;
            } while (current != other.head);
        }
        return result;
    }
    // конкатенация списков
    CircularList& operator+=(const CircularList& other) {
        Node* current = other.head;
        if (current) {
            do {
                add(current->data);
                current = current->next;
            } while (current != other.head);
        }
        return *this;
    }

    void Game(int count_names, int drop, vector<string> Names)
    {
        CircularList list;
        for (int i = 0; i < count_names; i++) {
            list.add(i);
        }
        Node* current = list.head;
        Node* prev = nullptr;
        vector<string> delete_names;
        int go = 0;
        int count = count_names;
        int j = 1;
        int tt = count_names - 1;
        while (count != 1)
        {
            if (go < tt)
            {
                if (j == drop)
                {
                    j = 1;
                    prev->next = current->next;
                    if (current == list.head)
                    {
                        list.head = list.head->next;
                        go++;
                    }
                    else
                    {
                        list.remove(go);
                    }
                    delete_names.push_back(Names[go]);
                    Names.erase(Names.begin() + go-1);
                    count--;
                    tt--;
                    current = current->next;
                }
                else
                {
                    j++;
                    go++;
                    prev = current;
                    current = current->next;
                }
            }
            else
            {
                go = 0;
                prev = current;
                current = current->next;
            }
        }
        cout << "Победитель:" << Names.back() <<endl;
        cout << "Проигравшие:" ;
        for (int j = 0; j < delete_names.size(); j++)
        {
            cout << delete_names[j] << " ";
        }
    }

};

int main() {
    setlocale(LC_ALL, "Russian");
    CircularList list;
    vector<string> Names = { "Masha","Dima","Roma","Yasha","Konor" };
    list.Game(Names.size(), 2, Names);
    return 0;
}
